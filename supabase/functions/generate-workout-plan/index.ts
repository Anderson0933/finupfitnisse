
import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.39.3';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { userProfile } = await req.json();
    console.log('üöÄ Dados recebidos na API:', userProfile);

    const groqApiKey = Deno.env.get('GROQ_API_KEY');

    if (!groqApiKey || groqApiKey.trim() === '') {
      console.error('‚ùå GROQ_API_KEY n√£o configurada ou vazia');
      console.log('üìã Usando plano de fallback devido √† chave n√£o configurada');
      const fallbackPlan = createEnhancedFallbackPlan(userProfile);
      
      return new Response(
        JSON.stringify(fallbackPlan),
        { 
          headers: { 
            'Content-Type': 'application/json',
            ...corsHeaders 
          } 
        }
      );
    }

    console.log('‚úÖ Chave Groq configurada, gerando prompt personalizado avan√ßado...');

    // Mapear valores para portugu√™s mais amig√°vel
    const goalsMap = {
      'perder_peso': 'perder peso e queimar gordura corporal',
      'perda_peso': 'perder peso e queimar gordura corporal',
      'ganhar_massa': 'ganhar massa muscular e hipertrofia',
      'hipertrofia': 'ganhar massa muscular e hipertrofia',
      'tonificar': 'tonificar o corpo e definir m√∫sculos',
      'condicionamento': 'melhorar condicionamento cardiovascular',
      'forca': 'aumentar for√ßa e pot√™ncia muscular',
      'flexibilidade': 'melhorar flexibilidade e mobilidade',
      'geral': 'condicionamento f√≠sico geral',
      'saude_geral': 'condicionamento f√≠sico geral'
    };

    const equipmentMap = {
      'academia_completa': 'academia completa com halteres, barras, m√°quinas de muscula√ß√£o, esteiras e equipamentos de cardio',
      'casa_halteres': 'treino em casa com halteres, barras, el√°sticos e equipamentos b√°sicos',
      'casa_basico': 'treino em casa com equipamentos b√°sicos limitados',
      'peso_corporal': 'exerc√≠cios usando apenas o peso corporal, sem equipamentos',
      'parque': 'exerc√≠cios ao ar livre em parques com barras e equipamentos p√∫blicos'
    };

    const limitationsMap = {
      'nenhuma': 'nenhuma limita√ß√£o f√≠sica',
      'joelho': 'problemas no joelho - evitar impacto e sobrecarga',
      'costas': 'problemas nas costas - foco em fortalecimento do core',
      'ombro': 'problemas no ombro - evitar movimentos overhead',
      'tornozelo': 'problemas no tornozelo - exerc√≠cios de baixo impacto',
      'cardiaco': 'problemas card√≠acos - intensidade moderada controlada',
      'outros': 'outras limita√ß√µes f√≠sicas espec√≠ficas'
    };

    const fitnessLevelMap = {
      'sedentario': 'sedent√°rio - iniciante absoluto sem experi√™ncia em exerc√≠cios',
      'pouco_ativo': 'pouco ativo - experi√™ncia limitada com exerc√≠cios',
      'iniciante': 'iniciante - alguma experi√™ncia b√°sica com treinos',
      'moderado': 'moderadamente ativo - alguma experi√™ncia com treinos',
      'intermediario': 'intermedi√°rio - experi√™ncia regular com exerc√≠cios',
      'ativo': 'ativo - experi√™ncia regular com exerc√≠cios',
      'muito_ativo': 'muito ativo - experi√™ncia avan√ßada em treinamento',
      'avancado': 'atl√©tico avan√ßado - alto n√≠vel de condicionamento'
    };

    const goals = goalsMap[userProfile.fitness_goals?.[0]] || userProfile.fitness_goals?.[0] || 'melhorar condicionamento geral';
    const equipment = equipmentMap[userProfile.equipment] || userProfile.equipment || 'equipamentos b√°sicos';
    const limitations = limitationsMap[userProfile.limitations] || userProfile.limitations || 'nenhuma limita√ß√£o';
    const fitnessLevel = fitnessLevelMap[userProfile.fitness_level] || userProfile.fitness_level || 'iniciante';

    // Calcular IMC para personaliza√ß√£o adicional
    let imcInfo = '';
    if (userProfile.height && userProfile.weight) {
      const heightInMeters = userProfile.height / 100;
      const imc = userProfile.weight / (heightInMeters * heightInMeters);
      imcInfo = `IMC: ${imc.toFixed(1)} - `;
      if (imc < 18.5) imcInfo += 'Abaixo do peso - foco em ganho de massa e for√ßa';
      else if (imc < 25) imcInfo += 'Peso normal - manuten√ß√£o e tonifica√ß√£o';
      else if (imc < 30) imcInfo += 'Sobrepeso - foco em queima de gordura';
      else imcInfo += 'Obesidade - exerc√≠cios de baixo impacto e queima cal√≥rica';
    }

    // Criar prompt detalhado para 8 semanas com estrutura correta
    const enhancedPrompt = `Voc√™ √© um personal trainer certificado com 15 anos de experi√™ncia. Crie um plano de treino de 8 SEMANAS estruturado com ${userProfile.available_days || 3} dias por semana.

PERFIL COMPLETO DO ALUNO:
- Idade: ${userProfile.age || 'N√£o informado'} anos
- Sexo: ${userProfile.gender || 'N√£o informado'}
- Altura: ${userProfile.height || 'N√£o informado'} cm
- Peso: ${userProfile.weight || 'N√£o informado'} kg
- ${imcInfo}
- N√≠vel: ${fitnessLevel}
- Objetivo: ${goals}
- Dias Dispon√≠veis: ${userProfile.available_days || 3} por semana
- Dura√ß√£o: ${userProfile.session_duration || 60} minutos
- Equipamentos: ${equipment}
- Limita√ß√µes: ${limitations}

RETORNE APENAS um JSON seguindo EXATAMENTE esta estrutura:

{
  "title": "Plano de Treino de 8 Semanas - [Objetivo] - N√≠vel [N√≠vel]",
  "description": "Plano periodizado personalizado...",
  "difficulty_level": "iniciante|intermediario|avancado",
  "duration_weeks": 8,
  "total_workouts": ${(userProfile.available_days || 3) * 8},
  "workouts": [
    {
      "week": 1,
      "day": 1,
      "title": "Treino A - Corpo Inteiro",
      "focus": "Adapta√ß√£o e aprendizado t√©cnico",
      "estimated_duration": 45,
      "warm_up": {
        "duration": 10,
        "exercises": [
          {
            "name": "Caminhada no Local",
            "duration": 300,
            "instructions": "Marche no local elevando os joelhos moderadamente"
          }
        ]
      },
      "main_exercises": [
        {
          "name": "Agachamento Livre",
          "muscle_groups": ["Quadr√≠ceps", "Gl√∫teos", "Core"],
          "sets": 3,
          "reps": "10-12",
          "rest_seconds": 60,
          "weight_guidance": "Peso corporal",
          "instructions": "Posi√ß√£o inicial: P√©s na largura dos ombros...",
          "form_cues": ["Mantenha o peito ereto", "Joelhos alinhados com os p√©s"],
          "progression_notes": "Aumente para 15 reps na semana 2"
        }
      ],
      "cool_down": {
        "duration": 8,
        "exercises": [
          {
            "name": "Alongamento de Quadr√≠ceps",
            "duration": 30,
            "instructions": "Segure o p√© e puxe em dire√ß√£o ao gl√∫teo"
          }
        ]
      }
    }
  ],
  "nutrition_tips": [
    "Hidrate-se com 35-40ml por kg de peso corporal diariamente",
    "Consuma prote√≠na 30min ap√≥s o treino para recupera√ß√£o muscular"
  ],
  "progression_schedule": {
    "weeks_1_2": "Adapta√ß√£o - foco na t√©cnica e volume baixo",
    "weeks_3_4": "Progress√£o gradual - aumento de volume",
    "weeks_5_6": "Intensifica√ß√£o - t√©cnicas avan√ßadas",
    "weeks_7_8": "Consolida√ß√£o - refinamento e pico"
  }
}

IMPORTANTE: Crie EXATAMENTE ${(userProfile.available_days || 3) * 8} treinos completos distribu√≠dos nas 8 semanas. Cada treino deve ter warm_up, main_exercises detalhados e cool_down.`;

    console.log('üì§ Enviando requisi√ß√£o detalhada para Groq API...');

    const response = await fetch('https://api.groq.com/openai/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${groqApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'llama-3.3-70b-versatile',
        messages: [
          { 
            role: 'system', 
            content: 'Voc√™ √© um personal trainer certificado especialista em ci√™ncia do exerc√≠cio. Crie planos de treino estruturados seguindo exatamente o formato JSON solicitado.' 
          },
          { role: 'user', content: enhancedPrompt }
        ],
        max_tokens: 16000,
        temperature: 0.1,
      }),
    });

    console.log('üìä Status da resposta Groq:', response.status);

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Erro da API Groq:', response.status, errorText);
      
      console.log('üìã Usando plano de fallback avan√ßado devido ao erro na API Groq');
      const fallbackPlan = createEnhancedFallbackPlan(userProfile);
      
      return new Response(
        JSON.stringify(fallbackPlan),
        { 
          headers: { 
            'Content-Type': 'application/json',
            ...corsHeaders 
          } 
        }
      );
    }

    const data = await response.json();
    console.log('‚úÖ Resposta recebida do Groq com sucesso');

    let content = data.choices?.[0]?.message?.content || '';

    if (!content || content.trim() === '') {
      console.log('‚ö†Ô∏è Conte√∫do vazio da API Groq, usando fallback avan√ßado');
      const fallbackPlan = createEnhancedFallbackPlan(userProfile);
      
      return new Response(
        JSON.stringify(fallbackPlan),
        { 
          headers: { 
            'Content-Type': 'application/json',
            ...corsHeaders 
          } 
        }
      );
    }

    // Limpar e extrair JSON da resposta
    content = content.trim();
    
    // Remover poss√≠veis marcadores de c√≥digo
    if (content.includes('```json')) {
      const jsonMatch = content.match(/```json\s*([\s\S]*?)\s*```/);
      if (jsonMatch) {
        content = jsonMatch[1];
      }
    } else if (content.includes('```')) {
      const jsonMatch = content.match(/```\s*([\s\S]*?)\s*```/);
      if (jsonMatch) {
        content = jsonMatch[1];
      }
    }

    let workoutPlan;
    try {
      workoutPlan = JSON.parse(content);
      console.log('‚úÖ JSON parseado com sucesso da API Groq');
      
      // Validar e corrigir difficulty_level
      const validLevels = ['iniciante', 'intermediario', 'avancado'];
      if (!workoutPlan.difficulty_level || !validLevels.includes(workoutPlan.difficulty_level)) {
        workoutPlan.difficulty_level = mapFitnessLevelToDifficulty(userProfile.fitness_level);
      }
      
      // Validar estrutura b√°sica
      if (!workoutPlan.title || !workoutPlan.workouts || !Array.isArray(workoutPlan.workouts)) {
        throw new Error('Estrutura do JSON inv√°lida da API Groq');
      }

      // Adicionar flag indicando que veio da API Groq
      workoutPlan.source = 'groq_api_enhanced';
      workoutPlan.generated_for = {
        goals: goals,
        equipment: equipment,
        level: fitnessLevel,
        limitations: limitations,
        days: userProfile.available_days || 3,
        duration: userProfile.session_duration || 60
      };
      
      console.log('üéØ Plano personalizado avan√ßado de 8 semanas gerado com sucesso pela API Groq!');
      
    } catch (parseError) {
      console.error('‚ùå Erro ao fazer parse do JSON da API Groq:', parseError);
      console.log('üìÑ Conte√∫do recebido:', content.substring(0, 500) + '...');
      
      // Usar plano de fallback avan√ßado
      console.log('üìã Usando plano de fallback avan√ßado devido ao erro de parse');
      workoutPlan = createEnhancedFallbackPlan(userProfile);
    }

    console.log('üéâ Retornando plano final avan√ßado de 8 semanas gerado pela API Groq');

    return new Response(
      JSON.stringify(workoutPlan),
      { 
        headers: { 
          'Content-Type': 'application/json',
          ...corsHeaders 
        } 
      }
    );

  } catch (error) {
    console.error('üí• Erro geral no generate-workout-plan:', error);
    
    // Em caso de erro geral, retornar plano b√°sico avan√ßado
    const basicPlan = createEnhancedFallbackPlan(null);

    return new Response(
      JSON.stringify(basicPlan),
      { 
        status: 200,
        headers: { 
          'Content-Type': 'application/json',
          ...corsHeaders 
        } 
      }
    );
  }
});

function mapFitnessLevelToDifficulty(fitnessLevel: string): string {
  switch (fitnessLevel) {
    case 'sedentario':
    case 'pouco_ativo':
    case 'iniciante':
      return 'iniciante';
    case 'moderado':
    case 'ativo':
    case 'intermediario':
      return 'intermediario';
    case 'muito_ativo':
    case 'avancado':
      return 'avancado';
    default:
      return 'iniciante';
  }
}

function createEnhancedFallbackPlan(userProfile: any) {
  const level = userProfile?.fitness_level || 'sedentario';
  const goals = userProfile?.fitness_goals?.[0] || 'condicionamento geral';
  const difficultyLevel = mapFitnessLevelToDifficulty(level);
  const availableDays = userProfile?.available_days || 3;
  const sessionDuration = userProfile?.session_duration || 60;
  
  // Mapear objetivos para descri√ß√£o
  const goalsDescription = {
    'perder_peso': 'perda de peso e queima de gordura',
    'perda_peso': 'perda de peso e queima de gordura',
    'ganhar_massa': 'ganho de massa muscular',
    'hipertrofia': 'ganho de massa muscular',
    'tonificar': 'tonifica√ß√£o corporal',
    'condicionamento': 'melhora do condicionamento f√≠sico',
    'forca': 'aumento da for√ßa',
    'flexibilidade': 'melhora da flexibilidade',
    'geral': 'condicionamento geral',
    'saude_geral': 'condicionamento geral'
  };

  const goalDesc = goalsDescription[goals] || 'condicionamento geral';
  
  // Criar workouts estruturados para 8 semanas
  const workouts = [];
  
  for (let week = 1; week <= 8; week++) {
    for (let day = 1; day <= availableDays; day++) {
      const workoutIndex = ((week - 1) * availableDays) + day;
      
      let workoutTitle = '';
      let focus = '';
      let mainExercises = [];
      
      if (availableDays === 3) {
        // Treino ABC
        if (day === 1) {
          workoutTitle = 'Treino A - Pernas e Gl√∫teos';
          focus = week <= 2 ? 'Adapta√ß√£o t√©cnica' : week <= 4 ? 'Progress√£o de volume' : week <= 6 ? 'Intensifica√ß√£o' : 'Consolida√ß√£o';
          mainExercises = [
            {
              name: 'Agachamento Livre',
              muscle_groups: ['Quadr√≠ceps', 'Gl√∫teos', 'Core'],
              sets: week <= 2 ? 3 : week <= 4 ? 4 : week <= 6 ? 4 : 3,
              reps: week <= 2 ? '10-12' : week <= 4 ? '12-15' : week <= 6 ? '8-12' : '10-12',
              rest_seconds: week <= 2 ? 60 : week <= 4 ? 90 : week <= 6 ? 120 : 90,
              weight_guidance: 'Peso corporal ou halteres',
              instructions: 'Posi√ß√£o inicial: P√©s na largura dos ombros, pontas levemente voltadas para fora. Des√ßa flexionando joelhos e quadril, mantendo peito ereto e coluna neutra.',
              form_cues: ['Mantenha o peito ereto', 'Joelhos alinhados com os p√©s', 'Peso nos calcanhares'],
              progression_notes: week <= 2 ? 'Foque na t√©cnica perfeita' : week <= 4 ? 'Aumente repeti√ß√µes gradualmente' : week <= 6 ? 'Adicione peso se poss√≠vel' : 'Mantenha qualidade t√©cnica'
            }
          ];
        } else if (day === 2) {
          workoutTitle = 'Treino B - Peito, Ombros e Tr√≠ceps';
          focus = week <= 2 ? 'Adapta√ß√£o t√©cnica' : week <= 4 ? 'Progress√£o de volume' : week <= 6 ? 'Intensifica√ß√£o' : 'Consolida√ß√£o';
          mainExercises = [
            {
              name: 'Flex√£o de Bra√ßo',
              muscle_groups: ['Peitoral', 'Deltoides', 'Tr√≠ceps'],
              sets: week <= 2 ? 3 : week <= 4 ? 4 : week <= 6 ? 4 : 3,
              reps: week <= 2 ? '6-10' : week <= 4 ? '8-12' : week <= 6 ? '6-10' : '8-10',
              rest_seconds: week <= 2 ? 60 : week <= 4 ? 90 : week <= 6 ? 120 : 90,
              weight_guidance: 'Peso corporal',
              instructions: 'Posi√ß√£o inicial: M√£os no ch√£o ligeiramente mais afastadas que os ombros. Corpo reto da cabe√ßa aos calcanhares. Des√ßa controladamente at√© o peito quase tocar o ch√£o.',
              form_cues: ['Corpo reto como prancha', 'Cotovelos a 45 graus', 'Amplitude completa'],
              progression_notes: week <= 2 ? 'Pode usar joelhos se necess√°rio' : week <= 4 ? 'Busque amplitude completa' : week <= 6 ? 'Explore varia√ß√µes' : 'Foque na qualidade'
            }
          ];
        } else {
          workoutTitle = 'Treino C - Costas e B√≠ceps';
          focus = week <= 2 ? 'Adapta√ß√£o t√©cnica' : week <= 4 ? 'Progress√£o de volume' : week <= 6 ? 'Intensifica√ß√£o' : 'Consolida√ß√£o';
          mainExercises = [
            {
              name: 'Remada Isom√©trica',
              muscle_groups: ['Lat√≠ssimo', 'Romboides', 'B√≠ceps'],
              sets: week <= 2 ? 3 : week <= 4 ? 4 : week <= 6 ? 4 : 3,
              reps: week <= 2 ? '30s' : week <= 4 ? '45s' : week <= 6 ? '60s' : '45s',
              rest_seconds: week <= 2 ? 60 : week <= 4 ? 90 : week <= 6 ? 120 : 90,
              weight_guidance: 'Resist√™ncia el√°stica ou peso corporal',
              instructions: 'Simule movimento de remada, contraindo fortemente m√∫sculos das costas. Mantenha postura ereta e ombros para tr√°s.',
              form_cues: ['Ombros para tr√°s', 'Peito aberto', 'Cotovelos junto ao corpo'],
              progression_notes: week <= 2 ? 'Concentre-se na ativa√ß√£o muscular' : week <= 4 ? 'Aumente tempo gradualmente' : week <= 6 ? 'Maximize contra√ß√£o' : 'Mantenha intensidade'
            }
          ];
        }
      } else {
        // Adapta√ß√£o para outros n√∫meros de dias
        workoutTitle = `Treino ${day} - Corpo Inteiro`;
        focus = week <= 2 ? 'Adapta√ß√£o e familiariza√ß√£o' : week <= 4 ? 'Progress√£o gradual' : week <= 6 ? 'Intensifica√ß√£o' : 'Consolida√ß√£o';
        mainExercises = [
          {
            name: day % 2 === 1 ? 'Agachamento Livre' : 'Flex√£o de Bra√ßo',
            muscle_groups: day % 2 === 1 ? ['Quadr√≠ceps', 'Gl√∫teos'] : ['Peitoral', 'Tr√≠ceps'],
            sets: week <= 2 ? 3 : week <= 4 ? 4 : 4,
            reps: week <= 2 ? '8-12' : week <= 4 ? '10-15' : '8-12',
            rest_seconds: week <= 2 ? 60 : week <= 4 ? 90 : 120,
            weight_guidance: 'Peso corporal',
            instructions: day % 2 === 1 ? 
              'Agachamento: P√©s na largura dos ombros, des√ßa flexionando joelhos e quadril.' :
              'Flex√£o: M√£os no ch√£o, corpo reto, des√ßa peito at√© quase tocar o solo.',
            form_cues: day % 2 === 1 ? 
              ['Joelhos alinhados', 'Peito ereto'] : 
              ['Corpo reto', 'Amplitude completa'],
            progression_notes: `Semana ${week}: ${focus}`
          }
        ];
      }
      
      workouts.push({
        week: week,
        day: day,
        title: workoutTitle,
        focus: focus,
        estimated_duration: sessionDuration,
        warm_up: {
          duration: 10,
          exercises: [
            {
              name: 'Aquecimento Geral',
              duration: 300,
              instructions: 'Movimentos articulares e ativa√ß√£o gradual'
            },
            {
              name: 'Mobilidade Espec√≠fica',
              duration: 300,
              instructions: 'Prepare as articula√ß√µes para o treino'
            }
          ]
        },
        main_exercises: mainExercises,
        cool_down: {
          duration: 8,
          exercises: [
            {
              name: 'Alongamento Geral',
              duration: 240,
              instructions: 'Alongue os m√∫sculos trabalhados'
            },
            {
              name: 'Relaxamento',
              duration: 240,
              instructions: 'Respire fundo e relaxe'
            }
          ]
        }
      });
    }
  }
  
  return {
    title: `Plano de Treino 8 Semanas ${difficultyLevel.charAt(0).toUpperCase() + difficultyLevel.slice(1)} - ${goalDesc.charAt(0).toUpperCase() + goalDesc.slice(1)}`,
    description: `Plano de treino periodizado de 8 semanas, desenvolvido especificamente para ${goalDesc}, considerando ${userProfile?.limitations || 'nenhuma limita√ß√£o'}, com ${availableDays} sess√µes semanais de ${sessionDuration} minutos cada.`,
    difficulty_level: difficultyLevel,
    duration_weeks: 8,
    total_workouts: availableDays * 8,
    source: 'enhanced_fallback',
    workouts: workouts,
    nutrition_tips: [
      'Hidrate-se com 35-40ml de √°gua por kg de peso corporal diariamente',
      'Consuma prote√≠na de qualidade 30-60 minutos ap√≥s o treino',
      'Mantenha refei√ß√µes equilibradas com carboidratos, prote√≠nas e gorduras saud√°veis',
      'Evite treinar em jejum prolongado ou muito pr√≥ximo √†s refei√ß√µes principais'
    ],
    progression_schedule: {
      weeks_1_2: 'Adapta√ß√£o e familiariza√ß√£o - foco na t√©cnica correta',
      weeks_3_4: 'Progress√£o gradual - aumento de volume e repeti√ß√µes',
      weeks_5_6: 'Intensifica√ß√£o - t√©cnicas avan√ßadas e maior sobrecarga',
      weeks_7_8: 'Consolida√ß√£o e refinamento - manuten√ß√£o da qualidade t√©cnica'
    }
  };
}
