
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.7.1';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

// Fun√ß√£o para limpar e validar JSON de forma mais robusta
function cleanAndParseJSON(content: string): any {
  console.log('üßπ Iniciando limpeza do JSON...');
  
  // Remover poss√≠veis caracteres de markdown ou formata√ß√£o
  let cleanContent = content
    .replace(/```json/gi, '')
    .replace(/```/g, '')
    .replace(/^\s*json\s*/i, '')
    .trim();

  // Encontrar o in√≠cio e fim do JSON principal
  const jsonStart = cleanContent.indexOf('{');
  const jsonEnd = cleanContent.lastIndexOf('}');
  
  if (jsonStart === -1 || jsonEnd === -1 || jsonStart >= jsonEnd) {
    throw new Error('N√£o foi poss√≠vel encontrar JSON v√°lido na resposta');
  }
  
  cleanContent = cleanContent.substring(jsonStart, jsonEnd + 1);
  
  try {
    // Primeira tentativa - JSON direto
    const parsed = JSON.parse(cleanContent);
    console.log('‚úÖ JSON parseado com sucesso');
    return parsed;
  } catch (parseError) {
    console.warn('‚ö†Ô∏è Primeira tentativa falhou, tentando corre√ß√µes...');
    
    try {
      // Segunda tentativa - corrigir v√≠rgulas extras e problemas comuns
      let fixedContent = cleanContent
        // Remover v√≠rgulas antes de } e ]
        .replace(/,(\s*[}\]])/g, '$1')
        // Remover v√≠rgulas duplicadas
        .replace(/,+/g, ',')
        // Corrigir aspas quebradas em strings
        .replace(/([^"]),\s*"([^"]*)"([^,:}\]]*)/g, '$1, "$2$3"')
        // Remover quebras de linha problem√°ticas dentro de strings
        .replace(/"([^"]*)\n([^"]*)"/g, '"$1 $2"');

      const parsed = JSON.parse(fixedContent);
      console.log('‚úÖ JSON parseado na segunda tentativa');
      return parsed;
    } catch (secondError) {
      console.error('‚ùå Erro cr√≠tico no parsing:', secondError.message);
      
      // Como √∫ltimo recurso, tentar extrair e criar um plano b√°sico v√°lido
      try {
        // Extrair informa√ß√µes b√°sicas que conseguimos encontrar
        const titleMatch = cleanContent.match(/"title"\s*:\s*"([^"]+)"/);
        const descMatch = cleanContent.match(/"description"\s*:\s*"([^"]+)"/);
        const levelMatch = cleanContent.match(/"difficulty_level"\s*:\s*"([^"]+)"/);
        
        if (titleMatch && descMatch && levelMatch) {
          console.warn('‚ö†Ô∏è Criando plano b√°sico a partir de fragmentos...');
          return {
            title: titleMatch[1],
            description: descMatch[1],
            difficulty_level: levelMatch[1],
            duration_weeks: 6,
            total_workouts: 18,
            workouts: [], // Ser√° preenchido depois
            nutrition_tips: [
              "Mantenha-se hidratado bebendo pelo menos 2-3 litros de √°gua por dia",
              "Consuma prote√≠na ap√≥s o treino para recupera√ß√£o muscular",
              "Inclua carboidratos complexos antes do treino para energia",
              "Mantenha uma alimenta√ß√£o equilibrada rica em nutrientes",
              "Evite alimentos processados e priorize alimentos naturais"
            ],
            progression_schedule: {
              week_1_2: "Adapta√ß√£o e aprendizado dos movimentos b√°sicos",
              week_3_4: "Aumento gradual da intensidade e carga",
              week_5_6: "Consolida√ß√£o e prepara√ß√£o para pr√≥ximo n√≠vel"
            }
          };
        }
        
        throw new Error('N√£o foi poss√≠vel extrair informa√ß√µes b√°sicas do JSON');
      } catch (fallbackError) {
        console.error('‚ùå Falha em todas as tentativas de parsing');
        throw new Error(`Erro ao processar JSON: ${parseError.message}`);
      }
    }
  }
}

async function processQueueItem(supabase: any, queueItem: any) {
  console.log('üöÄ Processando item da fila:', queueItem.id);
  
  try {
    // Marcar como processando
    await supabase
      .from('workout_plan_queue')
      .update({ 
        status: 'processing', 
        started_at: new Date().toISOString() 
      })
      .eq('id', queueItem.id);

    const requestData = queueItem.request_data;
    const groqApiKey = Deno.env.get('GROQ_API_KEY');
    
    if (!groqApiKey) {
      throw new Error('GROQ_API_KEY n√£o configurada');
    }

    // Calcular IMC e configura√ß√µes
    const heightInMeters = requestData.height / 100;
    const bmi = requestData.weight / (heightInMeters * heightInMeters);
    let bmiCategory = '';
    
    if (bmi < 18.5) bmiCategory = 'abaixo do peso';
    else if (bmi < 25) bmiCategory = 'peso normal';
    else if (bmi < 30) bmiCategory = 'sobrepeso';
    else bmiCategory = 'obesidade';

    // Determinar equipamentos baseado no local
    let availableEquipment = '';
    let workoutStyle = '';
    
    switch (requestData.workout_location) {
      case 'casa':
        availableEquipment = 'apenas peso corporal, sem equipamentos';
        workoutStyle = 'treinos funcionais com peso corporal';
        break;
      case 'casa_equipamentos':
        availableEquipment = 'halteres, el√°sticos, tapete, poss√≠vel barra fixa';
        workoutStyle = 'treinos com equipamentos b√°sicos';
        break;
      case 'academia':
        availableEquipment = 'equipamentos completos: m√°quinas, pesos livres, cardio';
        workoutStyle = 'muscula√ß√£o tradicional';
        break;
      case 'parque':
        availableEquipment = 'barras, paralelas, espa√ßo para corrida';
        workoutStyle = 'calistenia e exerc√≠cios ao ar livre';
        break;
      case 'condominio':
        availableEquipment = 'equipamentos b√°sicos de academia';
        workoutStyle = 'treinos adaptados';
        break;
    }

    const totalWorkouts = requestData.workout_days * 6;

    const prompt = `
Voc√™ √© um personal trainer brasileiro experiente e detalhista. Crie um plano de treino personalizado COMPLETO em JSON v√°lido com instru√ß√µes muito detalhadas.

DADOS DO CLIENTE:
- ${requestData.age} anos, ${requestData.height}cm, ${requestData.weight}kg (IMC: ${bmi.toFixed(1)} - ${bmiCategory})
- N√≠vel: ${requestData.fitness_level}
- Objetivo: ${requestData.fitness_goals}
- Local: ${requestData.workout_location} - ${availableEquipment}
- ${requestData.workout_days} dias/semana, ${requestData.available_time} por treino
- Condi√ß√µes: ${requestData.health_conditions || 'Nenhuma'}

IMPORTANTE: Retorne APENAS JSON v√°lido, sem formata√ß√£o markdown, come√ßando com { e terminando com }.

Estrutura obrigat√≥ria com instru√ß√µes MUITO DETALHADAS:
{
  "title": "Plano ${requestData.workout_days}x/semana - ${requestData.fitness_level}",
  "description": "Plano personalizado completo para ${requestData.fitness_goals} em ${requestData.workout_location} durante 6 semanas",
  "difficulty_level": "${requestData.fitness_level}",
  "duration_weeks": 6,
  "total_workouts": ${totalWorkouts},
  "workouts": [
    {
      "week": 1,
      "day": 1,
      "title": "Nome Espec√≠fico do Treino",
      "focus": "Grupos musculares detalhados trabalhados",
      "estimated_duration": ${parseInt(requestData.available_time)},
      "warm_up": {
        "duration": 8,
        "exercises": [
          {
            "name": "Exerc√≠cio de aquecimento espec√≠fico",
            "duration": 90,
            "instructions": "Instru√ß√µes muito detalhadas: posi√ß√£o inicial, movimento completo, respira√ß√£o, ritmo, cuidados especiais e objetivos do aquecimento."
          }
        ]
      },
      "main_exercises": [
        {
          "name": "Nome completo do exerc√≠cio",
          "muscle_groups": ["grupo_prim√°rio", "grupo_secund√°rio", "grupo_estabilizador"],
          "sets": 3,
          "reps": "8-12",
          "rest_seconds": 60,
          "weight_guidance": "Orienta√ß√£o espec√≠fica de carga baseada no n√≠vel e objetivo",
          "instructions": "Instru√ß√µes extremamente detalhadas: 1) Posi√ß√£o inicial exata (p√©s, m√£os, coluna, core); 2) Fase conc√™ntrica completa (movimento, m√∫sculos ativados, respira√ß√£o); 3) Fase exc√™ntrica controlada (tempo, controle, tens√£o); 4) Pontos de aten√ß√£o cr√≠ticos; 5) Varia√ß√µes para diferentes n√≠veis; 6) Sinais de execu√ß√£o correta.",
          "form_cues": [
            "Dica t√©cnica espec√≠fica 1 com detalhes anat√¥micos",
            "Dica t√©cnica espec√≠fica 2 com foco na seguran√ßa",
            "Dica t√©cnica espec√≠fica 3 para otimizar resultados",
            "Erro comum a evitar com explica√ß√£o detalhada"
          ],
          "progression_notes": "Como progredir especificamente: semana a semana, aumento de carga, varia√ß√µes de dificuldade, sinais para progress√£o.",
          "safety_tips": "Cuidados espec√≠ficos, contraindica√ß√µes, quando parar, adapta√ß√µes para les√µes.",
          "breathing_pattern": "Padr√£o respirat√≥rio detalhado para cada fase do movimento."
        }
      ],
      "cool_down": {
        "duration": 7,
        "exercises": [
          {
            "name": "Alongamento espec√≠fico",
            "duration": 60,
            "instructions": "Instru√ß√µes detalhadas: posi√ß√£o, amplitude, respira√ß√£o, tempo de manuten√ß√£o, sensa√ß√µes esperadas, m√∫sculos alvos."
          }
        ]
      },
      "workout_tips": [
        "Dica espec√≠fica para este treino baseada no objetivo",
        "Orienta√ß√£o nutricional pr√©/p√≥s treino",
        "Hidrata√ß√£o espec√≠fica para a intensidade"
      ]
    }
  ],
  "nutrition_tips": [
    "Hidrata√ß√£o espec√≠fica: quantidade por peso corporal e atividade",
    "Prote√≠na p√≥s-treino: timing ideal, quantidade e fontes recomendadas",
    "Carboidratos pr√©-treino: tipos, timing e quantidades",
    "Suplementa√ß√£o b√°sica se necess√°ria para o objetivo espec√≠fico",
    "Alimenta√ß√£o para recupera√ß√£o muscular baseada no treino"
  ],
  "progression_schedule": {
    "week_1_2": "Adapta√ß√£o neural e t√©cnica: foco na forma perfeita, cargas moderadas, estabelecimento de padr√µes de movimento",
    "week_3_4": "Intensifica√ß√£o controlada: aumento progressivo de cargas, maior volume, refinamento t√©cnico",
    "week_5_6": "M√°xima adapta√ß√£o: cargas elevadas, t√©cnicas avan√ßadas, prepara√ß√£o para novo ciclo"
  },
  "recovery_guidelines": {
    "sleep": "Orienta√ß√µes espec√≠ficas de sono para recupera√ß√£o muscular",
    "rest_days": "Como aproveitar dias de descanso para otimizar resultados",
    "signs_of_overtraining": "Sinais importantes para reconhecer e prevenir overtraining"
  }
}

INSTRU√á√ïES CR√çTICAS:
- Crie TODOS os ${totalWorkouts} treinos √∫nicos e variados para 6 SEMANAS COMPLETAS
- Cada exerc√≠cio deve ter instru√ß√µes EXTREMAMENTE detalhadas (m√≠nimo 3-4 frases por instru√ß√£o)
- Inclua varia√ß√µes e progress√µes espec√≠ficas para cada exerc√≠cio
- Use apenas equipamentos dispon√≠veis para ${requestData.workout_location}
- Adapte intensidade e complexidade para n√≠vel ${requestData.fitness_level}
- Foque no objetivo espec√≠fico: ${requestData.fitness_goals}
- Considere limita√ß√µes: ${requestData.health_conditions || 'Nenhuma'}
- Mantenha portugu√™s brasileiro em todas as instru√ß√µes`;

    console.log('üì§ Enviando requisi√ß√£o para Groq API...');

    const response = await fetch('https://api.groq.com/openai/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${groqApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'llama-3.3-70b-versatile',
        messages: [
          {
            role: 'system',
            content: 'Voc√™ √© um personal trainer brasileiro extremamente experiente e detalhista. Responda APENAS com JSON v√°lido, sem formata√ß√£o markdown. Inicie com { e termine com }. Seja MUITO detalhado nas instru√ß√µes dos exerc√≠cios, incluindo anatomia, biomec√¢nica, respira√ß√£o e progress√µes espec√≠ficas.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.1,
        max_tokens: 25000,
        top_p: 0.9
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Erro na API Groq: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    const content = data.choices[0].message.content.trim();
    
    let workoutPlan;
    try {
      workoutPlan = cleanAndParseJSON(content);
    } catch (parseError) {
      console.error('‚ùå Falha no parsing, criando plano de emerg√™ncia...');
      
      // Criar um plano b√°sico funcional
      workoutPlan = {
        title: `Plano ${requestData.workout_days}x/semana - ${requestData.fitness_level}`,
        description: `Plano personalizado para ${requestData.fitness_goals} em ${requestData.workout_location}`,
        difficulty_level: requestData.fitness_level,
        duration_weeks: 6,
        total_workouts: totalWorkouts,
        workouts: [],
        nutrition_tips: [
          "Mantenha-se hidratado bebendo pelo menos 2-3 litros de √°gua por dia",
          "Consuma prote√≠na ap√≥s o treino para recupera√ß√£o muscular",
          "Inclua carboidratos complexos antes do treino para energia",
          "Mantenha uma alimenta√ß√£o equilibrada rica em nutrientes",
          "Evite alimentos processados e priorize alimentos naturais"
        ],
        progression_schedule: {
          week_1_2: "Adapta√ß√£o e aprendizado dos movimentos b√°sicos",
          week_3_4: "Aumento gradual da intensidade e carga",
          week_5_6: "Consolida√ß√£o e prepara√ß√£o para pr√≥ximo n√≠vel"
        }
      };
      
      // Gerar treinos b√°sicos
      for (let week = 1; week <= 6; week++) {
        for (let day = 1; day <= requestData.workout_days; day++) {
          const workout = {
            week,
            day,
            title: `Treino ${day} - Semana ${week}`,
            focus: "Treino completo de corpo inteiro",
            estimated_duration: parseInt(requestData.available_time) || 45,
            warm_up: {
              duration: 10,
              exercises: [{
                name: "Aquecimento Geral",
                duration: 600,
                instructions: "Realize movimentos articulares suaves e cardio leve para preparar o corpo."
              }]
            },
            main_exercises: [{
              name: "Exerc√≠cio Principal",
              muscle_groups: ["corpo_inteiro"],
              sets: 3,
              reps: "10-15",
              rest_seconds: 60,
              weight_guidance: "Use carga adequada ao seu n√≠vel",
              instructions: "Execute com boa t√©cnica, focando na forma correta.",
              form_cues: ["Mantenha postura alinhada", "Respire corretamente", "Execute movimento controlado"],
              progression_notes: "Aumente gradualmente a intensidade conforme evolui.",
              safety_tips: "Pare se sentir dor ou desconforto.",
              breathing_pattern: "Expire no esfor√ßo, inspire no relaxamento."
            }],
            cool_down: {
              duration: 10,
              exercises: [{
                name: "Alongamento Geral",
                duration: 600,
                instructions: "Alongue os principais grupos musculares trabalhados."
              }]
            },
            workout_tips: [
              "Mantenha boa hidrata√ß√£o durante o treino",
              "Foque na qualidade dos movimentos",
              "Respeite seus limites"
            ]
          };
          workoutPlan.workouts.push(workout);
        }
      }
    }
    
    // Garantir que temos 6 semanas e o n√∫mero correto de treinos
    workoutPlan.duration_weeks = 6;
    
    if (!workoutPlan.workouts || workoutPlan.workouts.length !== totalWorkouts) {
      console.warn(`‚ö†Ô∏è Ajustando n√∫mero de treinos para ${totalWorkouts}`);
      
      if (!workoutPlan.workouts) workoutPlan.workouts = [];
      
      while (workoutPlan.workouts.length < totalWorkouts) {
        const week = Math.floor(workoutPlan.workouts.length / requestData.workout_days) + 1;
        const day = (workoutPlan.workouts.length % requestData.workout_days) + 1;
        
        const workout = {
          week,
          day,
          title: `Treino ${day} - Semana ${week}`,
          focus: "Treino completo",
          estimated_duration: parseInt(requestData.available_time) || 45,
          warm_up: {
            duration: 10,
            exercises: [{
              name: "Aquecimento",
              duration: 600,
              instructions: "Aquecimento adequado para preparar o corpo."
            }]
          },
          main_exercises: [{
            name: "Exerc√≠cio Principal",
            muscle_groups: ["geral"],
            sets: 3,
            reps: "10-15",
            rest_seconds: 60,
            weight_guidance: "Carga adequada",
            instructions: "Execute com boa t√©cnica.",
            form_cues: ["Boa postura", "Respira√ß√£o correta"],
            progression_notes: "Progrida gradualmente.",
            safety_tips: "Execute com seguran√ßa.",
            breathing_pattern: "Respira√ß√£o controlada."
          }],
          cool_down: {
            duration: 10,
            exercises: [{
              name: "Alongamento",
              duration: 600,
              instructions: "Alongamento final."
            }]
          },
          workout_tips: ["Hidrate-se bem", "Mantenha boa forma"]
        };
        workoutPlan.workouts.push(workout);
      }
      
      workoutPlan.total_workouts = totalWorkouts;
    }

    // Salvar plano no banco
    const { error: saveError } = await supabase
      .from('user_workout_plans')
      .upsert({
        user_id: requestData.user_id,
        plan_data: workoutPlan
      });

    if (saveError) {
      console.error('‚ùå Erro ao salvar plano:', saveError);
      throw saveError;
    }

    // Marcar como completo
    await supabase
      .from('workout_plan_queue')
      .update({ 
        status: 'completed', 
        completed_at: new Date().toISOString() 
      })
      .eq('id', queueItem.id);

    console.log('‚úÖ Plano processado com sucesso:', workoutPlan.title);
    
    return workoutPlan;

  } catch (error) {
    console.error('‚ùå Erro ao processar item da fila:', error);
    
    // Marcar como falha
    await supabase
      .from('workout_plan_queue')
      .update({ 
        status: 'failed', 
        error_message: error.message,
        completed_at: new Date().toISOString()
      })
      .eq('id', queueItem.id);
      
    throw error;
  }
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    );

    // Buscar pr√≥ximo item na fila
    const { data: queueItem, error: queueError } = await supabase
      .from('workout_plan_queue')
      .select('*')
      .eq('status', 'pending')
      .order('created_at', { ascending: true })
      .limit(1)
      .single();

    if (queueError) {
      if (queueError.code === 'PGRST116') {
        return new Response(JSON.stringify({ message: 'Nenhum item na fila' }), {
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        });
      }
      throw queueError;
    }

    const workoutPlan = await processQueueItem(supabase, queueItem);

    return new Response(JSON.stringify({ 
      success: true, 
      plan: workoutPlan,
      queue_item_id: queueItem.id 
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('‚ùå Erro na fun√ß√£o de processamento:', error);
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
